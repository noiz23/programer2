16 pag x dia  --> 52 Volatile variables

A class is thread-safe if it behaves correctly when accessed from multiple
threads, regardless of the scheduling or interleaving of the execution of
those threads by the runtime environment, and with no additional syn-
chronization or other coordination on the part of the calling code.

Thread-safe classes encapsulate any needed synchronization so that
clients need not provide their own.

stateless: it has no fields and references no fields from other classes. 
Stateless objects are always thread-safe.

The goal of lazy initialization is to defer initializing an object until it is actually needed while at
the same time ensuring that it is initialized only once.

It is not safe to use shared mutable long and double variables in multithreaded programs unless they are declared volatile
or guarded by a lock.

When a field is declared volatile, the compiler and runtime
are put on notice that this variable is shared and that operations on it should not
be reordered with other memory operations. A read of a
volatile variable always returns the most recent write by any thread.

Volatile variables: to ensure that updates to a variable are propagated predictably to other threads.

Read of a volatile variable always returns the most recent write by any thread.

Atomic variables do provide atomic read-modify-write support
and can often be used as “better volatile variables”.

Locking can guarantee both visibility and atomicity; volatile variables can
only guarantee visibility.

Publishing an object means making it available to code outside of its current scope,
such as by storing a reference to it where other code can find it, returning it
from a nonprivate method, or passing it to a method in another class. 

An object that is published when it should not have been is said to
have escaped.

Accessing shared, mutable data requires using synchronization; one way to avoid
this requirement is to not share. If data is only accessed from a single thread,
no synchronization is needed. This technique, thread confinement, is one of the
simplest ways to achieve thread safety.

Stack confinement is a special case of thread confinement in which an object can
only be reached through local variables. Language semantics ensure that
primitive local variables are always stack confined.

Immutable objects are always thread-safe.

The synchronization policy defines how an object coordinates access to its state
without violating its invariants or postconditions.

Synchronized collection classes include Vector and Hashtable.

Bounded queues make your program more robust to overload
by throttling activities that threaten to produce more work than can be
handled.

A synchronizer is any object that coordinates the control flow of threads based
on its state. Blocking queues can act as synchronizers; other types of synchroniz-
ers include semaphores, barriers, and latches.





