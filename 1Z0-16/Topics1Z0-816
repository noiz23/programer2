                                            JDK 11.

Java Fundamentals
    - Create and use final classes.  
    - Create and use inner, nested and anonymous classes. 
    - Create and use enumerations.
                    
Java Interfaces
    - Create and use interfaces with default methods:
        F:Name a diference between class and interface.
        B:The defining difference between an interface and a class is that a class can maintain state information, but an interface cannot.
        
    - Create and use interfaces with private methods:
        --------------------------------------------------------------------------------------------------------------------------------------
        F:An interface can include a private method?
        B:Yes, an interface can contain:
            constant variables (since Java 1.0)
            abstract methods (since Java 1.0)
            nested types (since Java 2.0)
            default methods (since Java 8.0)
            static methods (since Java 8.0)
            private methods (since Java 9.0)
            private static methods (since Java 9.0)
        --------------------------------------------------------------------------------------------------------------------------------------
        F:Where a private method in an interface can be used?
        B:Can be called only by a default method or another private method defined by the same interface.
        --------------------------------------------------------------------------------------------------------------------------------------

Functional Interface and Lambda Expressions
     - Define and write functional interfaces.
     - Create and use lambda expressions including statement lambdas, local-variable for lambda parameters.
     
Built-in Functional Interfaces
     - Use interfaces from java.util.function package
     - Use core functional interfaces including Predicate, Consumer, Function and Supplier
     - Use primitive and binary variations of base interfaces of java.util.function package
     
Migration to a Modular Application 
     - Migrate the application developed using a Java version prior to SE 9 to SE 11 including top-down and bottom-up migration, splitting a Java SE 8 application 
       into modules for migration.
     - Use jdeps to determine dependencies and identify ways to address the cyclic dependencies.
     
Concurrency
    - Create worker threads using Runnable, Callable and use an ExecutorService to concurrently execute tasks.
        F:How is execute a Callable task?
        B:A Callable task is executed by an ExecutorService, by calling its submit( ) method: <T> Future<T> submit(Callable<T> task)
        --------------------------------------------------------------------------------------------------------------------------------------
        F:Which is the firts Future’s get( ) method and how works?
        B:Waits for the result indefinitely: V get( ) throws InterruptedException, ExecutionException
        --------------------------------------------------------------------------------------------------------------------------------------
        F:Which is the second Future’s get( ) method and how works?
        B:Specify a timeout period in wait: V get(long wait, TimeUnit tu) throws InterruptedException, ExecutionException, TimeoutException
        --------------------------------------------------------------------------------------------------------------------------------------
        F:What ExecutorService does?
        B:Simplifies the execution of tasks in asynchronous mode.
        --------------------------------------------------------------------------------------------------------------------------------------
        F:How we can create ExecutorService?
        B:Use one of the factory methods of the Executors class:
            static ExecutorService newCachedThreadPool( )
            static ExecutorService newFixedThreadPool(int numThreads)
            static ScheduledExecutorService newScheduledThreadPool(int numThreads)
        --------------------------------------------------------------------------------------------------------------------------------------
        F:How tasks can be assigned to ExecutorService?
        B:Using the methods execute(),submit()*, invokeAny(), invokeAll()*. 
            * return an object or a collection of objects of type Future.
      **  --------------------------------------------------------------------------------------------------------------------------------------
      **  --------------------------------------------------------------------------------------------------------------------------------------
        F:What ExecutorService.shutdown()  does?
        B:Doesn't cause an immediate destruction of the ExecutorService. It will make the ExecutorService stop accepting new tasks and shut down 
          after all running threads finish their current work.
        --------------------------------------------------------------------------------------------------------------------------------------
        F:What ExecutorService.shutdownNow() does? 
        B:Tries to destroy the ExecutorService immediately, but it doesn't guarantee that all the running threads will be stopped at the same time. 
          This method returns a list of tasks which are waiting to be processed.
        
    - Use java.util.concurrent collections and classes including CyclicBarrier and CopyOnWriteArrayList.
        F:What is CyclicBarrier?
        B:Is a synchronizer that allows a set of threads to wait for each other to reach a common execution point, also called a barrier. It's inside
              java.util.concurrent package.
        --------------------------------------------------------------------------------------------------------------------------------------
        F:Which constructors CyclicBarrier have?
        B:CyclicBarrier(int numThreads) and
              CyclicBarrier(int numThreads, Runnable action)
        --------------------------------------------------------------------------------------------------------------------------------------
        F:Whats CyclicBarrier.await() method does? 
        B:pause execution of the thread until all of the other threads also call await( ).Once the specified number of threads has reached the 
              barrier, await( ) will return and execution will resume. Also, if you have specified an action, then that thread is executed.
        --------------------------------------------------------------------------------------------------------------------------------------
        F:Which are the CyclicBarrier.await() forms?
        B:int await( ) throws InterruptedException, BrokenBarrierException AND
              int await(long wait, TimeUnit tu) throws InterruptedException, BrokenBarrierException, TimeoutException
        --------------------------------------------------------------------------------------------------------------------------------------
        F:When use CopyOnWriteArrayList API?
        B:When we want to iterate over a list in a thread-safe way without an explicit synchronization.
        --------------------------------------------------------------------------------------------------------------------------------------
        F:In CopyOnWriteArrayList when UnsupportedOperationException is present?
        B:When executes the remove() operation on the returned Iterator.
        --------------------------------------------------------------------------------------------------------------------------------------
    - Write thread-safe code
    - Identify threading problems such as deadlocks and livelocks    
    
I/O (Fundamentals and NIO2)
    - Read data from and write console and file data using I/O Streams
        ~F:How reading console input?
        B: import java.io.+;
            BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
            Using char c = (char) br.read(); or String str = br.readLine(); 
        --------------------------------------------------------------------------------------------------------------------------------------
        ~F:How connect a PrintWriter to console output?
        B: import java.io.;*
           PrintWriter pw = new PrintWriter(System.out, true);
        --------------------------------------------------------------------------------------------------------------------------------------    
    - Use I/O Streams to read and write files.
        F:Which stream clases are most used to reading and writing files?
        B:FileInputStream and FileOutputStream.
        --------------------------------------------------------------------------------------------------------------------------------------
        ~F:Which resources can be use try-with-resources statement?
        B:resources that implement the AutoCloseable interface defined by java.lang.
        --------------------------------------------------------------------------------------------------------------------------------------
    - Read and write objects by using serialization.
    - Use Path interface to operate on file and directory paths.
    - Use Files class to check, delete, copy or move a file or directory.
    - Use Stream API with Files.  
    
Database Applications with JDBC
    - Connect to databases using JDBC URLs and DriverManager.
       ~F:How get a connection to db?
       B:Connection conn = DriverManager.getConnection(dbURL, username, password)
       --------------------------------------------------------------------------------------------------------------------------------------
    - Use PreparedStatement to perform CRUD operations.
       ~F:How create a PreparedStatement?
       B:PreparedStatement statement = conn.prepareStatement(<<parameterized SQL query>>);
       --------------------------------------------------------------------------------------------------------------------------------------
    - Use PreparedStatement and CallableStatement APIs to perform database operations.  
       ~F:When use CallableStatement?
       B:When you want to access the database stored procedures. The CallableStatement interface can also accept runtime input parameters.
       --------------------------------------------------------------------------------------------------------------------------------------
       ~F:How create CallableStatement?
       B:CallableStatement cstmt = conn.prepareCall (<<stored procedure, with parameter placeholders>>);
       --------------------------------------------------------------------------------------------------------------------------------------
       ~F:How register the OUT (INOUT) parameters in CallableStatement?
       B:stmt.registerOutParameter(n, java.sql.Types.VARCHAR);
       --------------------------------------------------------------------------------------------------------------------------------------
       
Annotations
    - Describe the purpose of annotations and typical usage patterns.
    - Apply annotations to classes and methods.
    - Describe commonly used annotations in the JDK.
    - Declare custom annotations.
    
Localization
    - Use Locale class
    - Use resource bundles
    - Format messages, dates, and numbers with Java    
 
Secure Coding in Java SE Application
    - Prevent Denial of Service in Java applications
       ~F:What is Denial of Service (DoS)?
       B:Is a cyber-attack on an individual Computer or Website with intent to deny services to intended users.
         Their purpose is to disrupt an organization’s network operations by denying access to its users.
       --------------------------------------------------------------------------------------------------------------------------------------
       ~F:Name examples of DoS technique (Denial of Service).
       B: - Ping of Death
          - Flooding a network with useless activity.
          - Changing permissions or breaking authorization logic.
          - The Smurf_attack
      --------------------------------------------------------------------------------------------------------------------------------------
      ~F:What are the problems generated by DoS (Denial of Service)
      B:- Ineffective services
        - Inaccessible services
        - Interruption of network traffic
        - Connection interference
      --------------------------------------------------------------------------------------------------------------------------------------
      ~F:How prevent DoS (Denial of Service)?
      B: Using - Cloud Mitigation Provider.
               - Firewall
               - Internet Service Provider (ISP)
    --------------------------------------------------------------------------------------------------------------------------------------
    - Secure confidential information in Java application
    - Implement Data integrity guidelines- injections and inclusion and input validation
    - Prevent external attack of the code by limiting Accessibility and Extensibility, properly handling input validation, and mutablity
    - Secure constructing sensitive objects
    - Secure Serialization and Deserialization
    
Parallel Streams
    - Develop the code that uses parallel streams
    - Implement decomposition and reduction with streams
    
Lambda Operations on Streams
    - Extract stream data using map, peek and flatMap methods
      F:In Stream API, what is peek()?
      B:Is a method intended to see the elements of a stream in a particular point of the pipeline.
        It just executes the provided Consumer and returns a new stream with the same elements of the original one.
     --------------------------------------------------------------------------------------------------------------------------------------  
    - Search stream data using search findFirst, findAny, anyMatch, allMatch and noneMatch methods
      ~F:What is a short-circuiting terminal operation?
      B:A terminal operation is short-circuiting if, when presented with infinite input, it may terminate in finite time. 
        Ex: anyMatch,findFirst,findAny,allMatch,noneMatch
     --------------------------------------------------------------------------------------------------------------------------------------  
      ~F:In Stream API, what findFirst method does?
      B:returns an Optional describing the first element of this stream, or an empty Optional if the stream is empty.
        If the element selected is null, NullPointerException is thrown.
     -------------------------------------------------------------------------------------------------------------------------------------- 
      ~F:In Stream API, what anyMatch method does?
      B:returns whether any elements of this stream match the provided predicate (boolean).
        If the stream is empty then false is returned and the predicate is not evaluated.
     --------------------------------------------------------------------------------------------------------------------------------------
      ~F:In Stream API, what findAny method does?
      B:returns an Optional describing some element of the stream, or an empty Optional if the stream is empty.
        If the element selected is null, NullPointerException is thrown.
     --------------------------------------------------------------------------------------------------------------------------------------
      ~F:In Stream API, what allMatch method does?
      B:returns whether all elements of this stream match the provided predicate (boolean).
        If the stream is empty then true is returned and the predicate is not evaluated
     --------------------------------------------------------------------------------------------------------------------------------------
      ~F:In Stream API, what noneMatch method does?
      B:is used to check if no element of the stream match the provided predicate (return boolean).
        If the stream is empty then true is returned and the predicate is not evaluated.
     --------------------------------------------------------------------------------------------------------------------------------------
    - Use Optional class
    - Perform calculations using count, max, min, average and sum stream operations
    - Sort a collection using lambda expressions
    - Use Collectors with streams, including the groupingBy and partitioningBy operation    

