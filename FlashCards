F:  What are some advantages of using NIO.2 views to read metadata rather than individually from java.nio.Files methods? 
B:  - It makes fewer round-trips to the file system.
    - It can be used to access file system–dependent attributes.
    - For reading multiple attributes, it is often more performant.
-----------------------------------------------------------------------------------------------------------------------------------
F: Name 3 advantages of the NIO.2 API over the legacy java.io.File class for working with files.
B: - NIO.2 supports file system-dependent attributes.
   - NIO.2 allows you to traverse a directory tree directly.
   - NIO.2 supports symbolic links.
-----------------------------------------------------------------------------------------------------------------------------------
F: What functionality does it provide the method relativize(Path)?
B:  The Path interface provides a method relativize(Path) for constructing the relative path from one Path object to another.
-----------------------------------------------------------------------------------------------------------------------------------
F: What functionality does it provide the method resolve(Path)?
B:  The Path interface includes a resolve(Path) method for creating a new Path by joining an existing path to the current path.
-----------------------------------------------------------------------------------------------------------------------------------
F: What functionality does it provide the method normalize(Path)?
B:  The Path interface includes a normalize(Path) method to eliminate the redundancies in the path.
-----------------------------------------------------------------------------------------------------------------------------------
F: What are Anonymous inner classes?
B: Are a special type of local inner class that does not have a name.
-----------------------------------------------------------------------------------------------------------------------------------
F: There are some inheritence rule for anonymous class?
B: Yes, they are required to extend exactly one class by name or implement exactly one interface.
-----------------------------------------------------------------------------------------------------------------------------------
F: Static nested classes can exist without an instance of the outer class?
B: Yes.
-----------------------------------------------------------------------------------------------------------------------------------
F:In the instanceof operation, which is the result if some operand is null? 
B:If the left operand is null, the result is false. If the rigth operand is null, the code doesn't compile because null is not an Object.
-----------------------------------------------------------------------------------------------------------------------------------
F:instanceof operand can be applied to two operands that are not in the same class hierarchy?
B:No, the code will not compile.
-----------------------------------------------------------------------------------------------------------------------------------
F:boolean equals(Object obj) compiles when called with null or a class of the wrong type?
B:Yes, and returns false.
-----------------------------------------------------------------------------------------------------------------------------------
F:Which is the return hashCode()?
B: public int hashCode() returns a number calculated with all or some of the instance variables used in equals(). 
-----------------------------------------------------------------------------------------------------------------------------------
F: Name n caracterictics of Enum types.
B: - can have instance variables
   - The constructors are required to be private or package private (dafault).
   - Are not allowed to have a public or protected constructor.
-----------------------------------------------------------------------------------------------------------------------------------
F:abstract enum methods require each enum type to implement the method?
B:Yes. is similar as an abstract superclass requires concrete subclasses to have an implementation of the abstracts methods.
-----------------------------------------------------------------------------------------------------------------------------------
F:What are the rules for methods to be overridden in subclasses?
B: - a method must have the same signature.
   - a method must be at least as accessible as the parent method.
   - must not declare any new or broader exceptions.
   - must use covariant return types.
-----------------------------------------------------------------------------------------------------------------------------------
F:two objects that return true for equals() objects must return the same hash code?
B: Yes.
-----------------------------------------------------------------------------------------------------------------------------------
F:Which is the return of method ordinal() in an Enum type?
B:The ordinal() method of an enum returns its corresponding int value. Like arrays, enums are zero based. 
    Remember that the index of an enum may change when you recompile the code and should not be used for comparison.
-----------------------------------------------------------------------------------------------------------------------------------
F: static methods or static variables are permited in Inner classes?.
B: No, only nested static classes are permitted to contain statics members.
-----------------------------------------------------------------------------------------------------------------------------------
F:How many categories(terminology) have nested clases?
B: Two: static and non-static. Nested classes that are declared static are called static nested classes. Non-static nested classes are called inner classes.
-----------------------------------------------------------------------------------------------------------------------------------
F:Which is the diference between equals and == ?
B: == compare references, equals compare content.
-----------------------------------------------------------------------------------------------------------------------------------
F:Which access modifiers can be used for an inner class?
B:All, unlike a "regular" class, an inner class can be private or protected or static.
-----------------------------------------------------------------------------------------------------------------------------------
F: Which access modifiers can be used for an principal class?
B: Principal class must be public or default and never static.
-----------------------------------------------------------------------------------------------------------------------------------
F:static inner class have access to members of the outer class that are not static?
B:No, Is just like static attributes and methods in a regular class.
-----------------------------------------------------------------------------------------------------------------------------------
F:What is Virtual method invocation?
B:Is when the subclass method gets called at runtime rather than the type in the variable reference.
-----------------------------------------------------------------------------------------------------------------------------------
F:An interface may extend another interface?
B:Yes, and in doing so it inherits all of the abstract methods.
-----------------------------------------------------------------------------------------------------------------------------------
F:Which actions the compiler do in interfaces?
B:automatically adds public to all interface methods, abstract to all non‐static and non‐default methods
-----------------------------------------------------------------------------------------------------------------------------------
F:A class can extends any number of classes?
B: No, can extends only one class, but can implements any interfaces.
-----------------------------------------------------------------------------------------------------------------------------------
F:Which members an interface can contain?
B: They can contain public static final constant values, public static methods, and public default methods. All members of an interface are public.
-----------------------------------------------------------------------------------------------------------------------------------
F:What is a functional interface?
B:Is an interface that contains a single (only one) abstract method. It can contais statict methods and/or default methods.
-----------------------------------------------------------------------------------------------------------------------------------
F: When the parentheses are optional in a lambda expresion?
B: Only when there is one parameter and it doesn’t have a type declared.
-----------------------------------------------------------------------------------------------------------------------------------
F: When data types for the input parameters of a lambda expression are optional?
B: When none parameter has it. If one paramter has a data type listed, all input parameters must provide a data type.
-----------------------------------------------------------------------------------------------------------------------------------
F:How we can access to a java object?
B: A Java object may be accessed using:
     - a reference with the same type as the object.
     - a reference that is a superclass of the object.
     - a reference that defines an interface that the object implements.
-----------------------------------------------------------------------------------------------------------------------------------
F: When is not required cast?
B: a cast is not required if the object is being reassigned to a supertype or interface of the object:
        Number nu = 0;
        Integer i = 2;
      
        nu = i;//Ok
        i = nu;//Not compile
-----------------------------------------------------------------------------------------------------------------------------------
F:How we can determinated which properties exist within the object in memory?
B: The type of the object determines that.
-----------------------------------------------------------------------------------------------------------------------------------
F:Which methods and variables are accessible to the Java program?
B:The type of the reference to the object determines that.
-----------------------------------------------------------------------------------------------------------------------------------
F:When is not required an explicit cast?
B: Casting an object from a subclass to a superclass.Casting an object from a superclass to a subclass requires it.
-----------------------------------------------------------------------------------------------------------------------------------
F:The compiler will not allow casts to unrelated types.?
B:No.
-----------------------------------------------------------------------------------------------------------------------------------
F: What happen if the object being cast is not actually an instance of that class.?
B: Even when the code compiles without issue, an exception may be thrown at runtime.
-----------------------------------------------------------------------------------------------------------------------------------
F:What is a design principle?
B:is an established idea or best practice that facilitates the software design process. 
-----------------------------------------------------------------------------------------------------------------------------------
F:In the wrapper Boolean class, how we can start their getter method?
B:Using get, for primitive boolean use is.
-----------------------------------------------------------------------------------------------------------------------------------
F:What is-a relationship is?.
B:is a inheritance test.The fundamental result of the is‐a principle is that if A is‐a B, then any instance of A can
      be treated like an instance of B. This holds true for a child that is a subclass of any parent,be it a direct subclass or a distant child.
-----------------------------------------------------------------------------------------------------------------------------------
F:What is the Has‐a Relationship?
B:is the object composition test.
-----------------------------------------------------------------------------------------------------------------------------------
F:What is the singleton pattern?
B:is a creational pattern focused on creating only one instance of an object in memory within an application, sharable by all classes and 
     threads within the pplication.
-----------------------------------------------------------------------------------------------------------------------------------
F:How are the constructors in the singletong pattern?
B: All constructors in a singleton class are marked private (The singleton class is effectively final), which ensures that 
     no other class is capable of instantiating another version of the class.
-----------------------------------------------------------------------------------------------------------------------------------
F:When we can use singletong?
B:Used in situations where we need access to a single set of data throughout an application, ex: application configuration data and reusable data caches.
     Singletons may also be used to coordinate access to shared resources, such as coordinating write access to a file.
-----------------------------------------------------------------------------------------------------------------------------------
F:What is the Immutable Objects pattern?
B:Is a creational pattern based on the idea of creating objects whose state does not change after they are created and can be easily
     shared across multiple classes.
-----------------------------------------------------------------------------------------------------------------------------------
F:Name n features of Immutable Objects pattern.
B: - Static methods are not part of the inmutable object pattern.
   - getter methods are not required to be marked synchronized.
   - all instance variables should be private and final to prevent them from being changed by a caller.
   - the class must be markend as final.
-----------------------------------------------------------------------------------------------------------------------------------
F:What is a design pattern?
B:Is a general repeatable solution to a commonly occurring problem in software design. Focused on solving a specific commonly occurring problem.
-----------------------------------------------------------------------------------------------------------------------------------
F:Diference between design principles and design patterns.
B:Design principles are often applied throughout an application, whereas design patterns are applied to solve specific problems.
-----------------------------------------------------------------------------------------------------------------------------------
F:An object can be marked as abstract final o viceversa?
B:  No, abstract and final can never be used together
-----------------------------------------------------------------------------------------------------------------------------------
F: Inheritance supports access to protected variables.?
B: Yes.
-----------------------------------------------------------------------------------------------------------------------------------
F:What type of objects can contain an ArrayList?
B: Any object, but an ArrayList can't contain primitives.
-----------------------------------------------------------------------------------------------------------------------------------
F:What are raw collections?
B: Collections written with-out generics (?).
-----------------------------------------------------------------------------------------------------------------------------------
F:What is an array?
B: An array is a built-in data structure that contains other objects or primitives.
-----------------------------------------------------------------------------------------------------------------------------------
F:When we want to specify that any type is OK, what can we use?
B: Use ?, it is an unbounded wildcard and represents any data type. 
-----------------------------------------------------------------------------------------------------------------------------------
F:How Upper-Bounded Wildcards works?
B: Upper bounded wildcard restricts the unknown type to be a specific type or a subtype of that type. -> <? extends A>.
-----------------------------------------------------------------------------------------------------------------------------------
F: Compiles?: ArrayList<Number> list = new ArrayList<Integer>();
B: No, a generic type can’t just use a subclass.
-----------------------------------------------------------------------------------------------------------------------------------
F: Compile List<? extends Number> list = new ArrayList<Integer>(); ?
B: Yes, The upper-bounded wildcard says that any class that extends Number or Number itself can be used as the formal parameter type -> Number or any subclass.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is <? extends Object>?
B: Is an upper bound that means any type that is Object or extends it. 
-----------------------------------------------------------------------------------------------------------------------------------
F: What is <? extends MyInterface> ?
B: Is an upper bound that means that any type that implements MyInterface.
-----------------------------------------------------------------------------------------------------------------------------------
F: How bounded wildcard  works?
B: It restricts the unknown type to be a specific type or a super type of that type. -> <? super A>.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is <? super Number> ?.
B: Is a lower bound that means any type that is Number or a superclass of Number.
-----------------------------------------------------------------------------------------------------------------------------------
//TO-DO read : https://docs.oracle.com/javase/tutorial/java/generics/wildcards.html
-----------------------------------------------------------------------------------------------------------------------------------
F: Which are the four main types (interfaces) of data structures that Java Collections Framework includes?
B: lists, sets,queues, and maps.
-----------------------------------------------------------------------------------------------------------------------------------
F: The Collection interface is the parent interface of ?
B: List, Set, and Queue. The Map interface does not extend Collection
-----------------------------------------------------------------------------------------------------------------------------------
F: What is a collection?
B: is a group of objects contained in a single object.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is the Java Collections Framework?.
B: is a set of classes in java.util for storing collections.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is a List?
B: is an ordered collection of elements that allows duplicate entries. Elements in a list can be accessed by an int index.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is a Set?
B: A set is a collection that does not allow duplicate entries, so Java returns false from the add() method.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is a Queue?
B: A queue is a collection that orders its elements in a specific order for processing.
       A typical queue processes its elements in a first-in, first-out order, but other orderings are possible.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is a Map?
B: A map is a collection that maps keys to values, with no duplicate keys allowed. The elements in a map are key/value pairs.Uses put() rather than add().
-----------------------------------------------------------------------------------------------------------------------------------
F: What is a LinkedList?
B: is an interface that implements both List and Queue, but isn’t as efficient as a “pure” queue.
-----------------------------------------------------------------------------------------------------------------------------------
F: Which is the benefit of LinkedList?
B: The main benefits of a LinkedList are that you can access, add, and remove from the beginning and end of the list in constant time.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is a Stack?
B: is a data structure where you add and remove elements from the top of the stack (Older last-in, first-out class).  If you need a stack, use an ArrayDeque instead.
-----------------------------------------------------------------------------------------------------------------------------------
F: What does boolean add(E e)?
B: It is used to append the specified element at the end of a list.
-----------------------------------------------------------------------------------------------------------------------------------
F: What does void add(int index, E element)?
B: It is used to insert the specified element at the specified position in a list.
-----------------------------------------------------------------------------------------------------------------------------------
F: What does E get(int index)?
B: It is used to fetch the element from the particular position of the list.
-----------------------------------------------------------------------------------------------------------------------------------
F: What does int lastIndexOf(Object o)?
B: It is used to return the index in this list of the last occurrence of the specified element, or -1 if the list does not contain this element.
-----------------------------------------------------------------------------------------------------------------------------------
F: What does E set(int index, E e)?
B: Replaces element at index and returns original.
-----------------------------------------------------------------------------------------------------------------------------------
F: How works a HashSet?
B: stores its elements in a hash table. This means that it uses the hashCode() method of the objects to retrieve them more efficiently. Not guarantee any iteration order.
-----------------------------------------------------------------------------------------------------------------------------------
F: How works a TreeSet?
B: stores its elements in a sorted tree structure. The main benefit is that the set is always in sorted order.
-----------------------------------------------------------------------------------------------------------------------------------
F: When use a queue?
B: when elements are added and removed in a specific order.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is a ArrayDeque?
B: is a “pure” double-ended queue. It stores its elements in a resizable array. The main benefit of an ArrayDeque is that it is more efficient than a LinkedList.
       First-in, first-out or last-in, first-out. Does not allow null values.
-----------------------------------------------------------------------------------------------------------------------------------
F: TreeSet cannot contain null elements?
B: No, It also means that TreeMap cannot contain null keys. Null values are OK.
-----------------------------------------------------------------------------------------------------------------------------------
F: Which values can contain Hashtable?
B: It can no null keys or values.
-----------------------------------------------------------------------------------------------------------------------------------
F: ArrayDeque can caontain null elements?
B: No.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is a Vector?
B: Is an Older thread-safe version of ArrayList.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is Comparable?
B: java.lang.Comparable is a functional interface:
         public interface Comparable<T> {
            public int compareTo(T o);
        }
-----------------------------------------------------------------------------------------------------------------------------------
F: What is Comparator?
B: java.util.Comparator is an interface that defines a compare(arg1, arg2) method with two arguments which represent compared objects and works similarly to the Comparable.compareTo() method.
-----------------------------------------------------------------------------------------------------------------------------------
F: Map have a contains() method?
B: No, It has containsKey() and containsValue() instead.
-----------------------------------------------------------------------------------------------------------------------------------
F: Map index start form 0.
B: False. Starts from 1: map.get(n) n starts in 1.
-----------------------------------------------------------------------------------------------------------------------------------
F: How to recognize the order type in a ArrayDeque?
B: push() -> LIFO. offer() -> FIFO
-----------------------------------------------------------------------------------------------------------------------------------
F: How works the ceiling() method in TreeSet?
B: Returns the smallest element greater than the specified one.
-----------------------------------------------------------------------------------------------------------------------------------
F: Name a diference between List and Queue.
B: List interface has a method to remove by index. Queue has only the remove by object method
-----------------------------------------------------------------------------------------------------------------------------------
F: What type of objects can a lamnda expresion access?.
B: Lambda expressions can access static variables, instance variables, effectively final method parameters, and effectively final local variables.
-----------------------------------------------------------------------------------------------------------------------------------
F: Name some features of Runnable interface.
B: Runnable interface doesn’t take any parameters, return any data, or use generics.
-----------------------------------------------------------------------------------------------------------------------------------
F: When we can use Supplier Interface?
B: is used when you want to generate or supply values without taking any input.
        @FunctionalInterface public class Supplier<T> {
            public T get();
        }
-----------------------------------------------------------------------------------------------------------------------------------
F: When use Consumer and BiConsumer interface?
B: You use a Consumer when you want to do something with a parameter (void accept(T t) but not return anything. BiConsumer does the same thing except that it takes two parameters (void accept(T t, U u);). 
-----------------------------------------------------------------------------------------------------------------------------------
F: What is Predicate and BiPredicate?
B: A Predicate FI accepts one argument and returns a boolean value. Its abstract method is (boolean test(T t);). A BiPredicate FI accepts two arguments 
       and return a boolean value (boolean test(T t, U u);).
       When you see a boolean returned, think Predicate unless the generics specify a Boolean return type.
-----------------------------------------------------------------------------------------------------------------------------------
F: What does the Function interface?
B: Is responsible for turning one parameter into a value of a potentially different type and returning it (R apply(T t);).
-----------------------------------------------------------------------------------------------------------------------------------
F: What does the BiFunction interface?
B: Is responsible for turning two parameters into a value and returning it.
-----------------------------------------------------------------------------------------------------------------------------------
F: What characteristic do UnaryOperator and BinaryOperator share?
B: They require all type parameters to be the same type.
-----------------------------------------------------------------------------------------------------------------------------------
F: Which is the diference between stream in Java and stream pipeline?
B: A stream in Java is a sequence of data. A stream pipeline is the operations that run on a stream to produce a result.
-----------------------------------------------------------------------------------------------------------------------------------
F: Which method can be invoked from a Collections or a Stream?
B: You can call forEach() directly on a Collection or on a Stream.
-----------------------------------------------------------------------------------------------------------------------------------
F: Why Streams cannot use a traditional for loop to run?
B: because Streams don’t implement the Iterable interface.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is the use of a IntStream?
B: Used for the primitive types int, short, byte, and char.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is the use of LongStream?
B: Used for the primitive type long.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is the DoubleStream?
B: Used for the primitive types double and float.
-----------------------------------------------------------------------------------------------------------------------------------
F: Which is the return of average() method?.
B: Returns an OptionalDouble since averages of any type can result in a fraction.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is Collectors partitioningBy() method ?
B: Is a predefined method of java.util.stream.Collectors class which is used to partition a stream of objects(or a set of elements) based on a given predicate
-----------------------------------------------------------------------------------------------------------------------------------
F: Which are the dedicated supplier classes?
B: BooleanSupplier, DoubleSupplier,IntSupplier,LongSupplier.
-----------------------------------------------------------------------------------------------------------------------------------
F: How code runs in a try-with-resources statement?
B: Resources are closed after the try clause ends and before any catch/ finally clauses and in the reverse order from which they were created.
-----------------------------------------------------------------------------------------------------------------------------------
F: Which is the syntax for an assert statement?
B: Has two: assert boolean_expression; and assert boolean_expression: error_message;. error_message is optional.
-----------------------------------------------------------------------------------------------------------------------------------
F: Which is the difference between AutoCloseable and Closeable?
B: AutoCloseable has Exception in the signature and Closeable has only IOException in the signature.
-----------------------------------------------------------------------------------------------------------------------------------
F: How we can create a Locale object?.
B: Locale is created using a constructor. The convention is to use lowercase for a language code and uppercase for a country code. The
       language is mandatory when using a constructor
-----------------------------------------------------------------------------------------------------------------------------------
F: Which is the diference between Java class resource bundles and property files?
B: Java class resource bundles can have non-String values while property files are limited to strings.
-----------------------------------------------------------------------------------------------------------------------------------
F: How Java look for properties?
B: Java specifies that it will look for a Java class resource bundle before a property file of the same name.
-----------------------------------------------------------------------------------------------------------------------------------
F: How is the index for months Calendar constants?
B: it begins with 0.
-----------------------------------------------------------------------------------------------------------------------------------
F: How is the chaining method in Period Objects?
B: Period does not allow chaining. Only the last Period method called counts.
-----------------------------------------------------------------------------------------------------------------------------------
F: Name a diference between Period and Duration.
B: Period format begins with a P and a Duration format begins with PT. They are different types and do not represent the same value even though they are both a day.
-----------------------------------------------------------------------------------------------------------------------------------
F: Name a diference between Period and Duration for measures
B: Duration uses hours/minutes/seconds and Period uses years months/days for measures
-----------------------------------------------------------------------------------------------------------------------------------
F: How we can create an Instant object?
B: Instant.now() or Instant.ofEpochSecond(epochSeconds) or zonedDateTime.toInstant()
       Without a time zone, Java doesn’t know what moment in time to use for the Instant.
-----------------------------------------------------------------------------------------------------------------------------------
F: How enable assertions?
B: Java uses the flags –ea or –enableassertions to turn on assertions. 
       –da or –disableassertions turns off assertions. The colon indicates for a specific class.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is an assertion?
B: is a boolean expression followed by an optional colon and message. The boolean expression is allowed to be in parenthesis, but this is not required. 
       They should not have side effects.
-----------------------------------------------------------------------------------------------------------------------------------
F: How is the variable in a multi-catch?
B: Since a multi-catch is used, the variable in the catch block is effectively final and cannot be reassigned.
-----------------------------------------------------------------------------------------------------------------------------------
F: A multi-catch can catch both a superclass and subclass?
B: No.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is the diference between Low-level streams  and High-level streams ?
B: Low-level streams provide access directly to underlying bytes. High-level streams build upon low-level streams for additional capabilities.
       The InputStream and OutputStream are abstract classes that use low-level I/O streams.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is a FileInputStream?
B: is a low-level stream that interacts directly with a file resource, not a stream resource.
-----------------------------------------------------------------------------------------------------------------------------------
F: Which are low-level stream classes? 
B: All low-level stream classes inherit from either the InputStream or OutputStream abstract classes. 
-----------------------------------------------------------------------------------------------------------------------------------
F: What are ByteArrayInputStream and ByteArrayOutputStream?
B: Are low-level stream classes that read and write arrays of bytes with buffering.
-----------------------------------------------------------------------------------------------------------------------------------
F: What are FileInputStream and FileOutputStream?
B: Are low-level stream classes. The FileInputStream receives data from a file in byte form. The FileOutputStream outputs the data to a file.
-----------------------------------------------------------------------------------------------------------------------------------
F: What are ObjectInputStream and ObjectOutputStream?
B: Are low-level stream classes.The ObjectInputStream deserializes primitive data and objects that have been previously serialized using an 
       ObjectOutputStream object.
-----------------------------------------------------------------------------------------------------------------------------------
F: What are PipedInputStream and PipedOutputStream?
B: Are low-level stream classes. The PipedInputStream and PipedOutputStream classes work with thread communication. They enable you to create 
       and connect two sides of a stream.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is SequenceInputStream?
B: Are low-level stream class. The SequenceInputStream class enables you to concatenate other input streams and to read from each of them, in turn.
-----------------------------------------------------------------------------------------------------------------------------------
F: Which is the result of the bufferedReader.readLine()?
B: returns a String and reads a line of input from the console. readPassword() returns a char[].
-----------------------------------------------------------------------------------------------------------------------------------
F: How many stream has the System class?
B: The System class has three streams: in is for input, err is for error, and out is for output.
-----------------------------------------------------------------------------------------------------------------------------------
F: Serialization of an object stores the static class data?
B: No, stores only the instance variable data.
-----------------------------------------------------------------------------------------------------------------------------------
F: What do ObjectOutputStream and ObjectInputStream?
B: perform serialization and deserialization on a low-level stream, respectively.
-----------------------------------------------------------------------------------------------------------------------------------
F: What do PrintStream and PrintWriter?
B: format text for a low-level OutputStream and Writer.
-----------------------------------------------------------------------------------------------------------------------------------
F: FileWriter and FileInputStream are low-level streams?
B: yes, they operate on a file directly.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is OutputStream?
B: is an abstract parent class and is neither high-level nor low-level.
-----------------------------------------------------------------------------------------------------------------------------------
F: How many output methods have Console?
B: Console defines two output methods, format() and printf(), that are identical in function.
-----------------------------------------------------------------------------------------------------------------------------------
F: What means a transient variable?
B: that their values will not be saved upon serialization.
-----------------------------------------------------------------------------------------------------------------------------------
F: How we can create a directory?
B: Files.createDirectory(Path) method to create a directory.
-----------------------------------------------------------------------------------------------------------------------------------
F: How we can create many directories?
B: like mkdirs() creates the target directory along with any nonexistent parent directories leading up to the target directory in the path.
-----------------------------------------------------------------------------------------------------------------------------------
F: When DirectoryNotEmptyException is thrown?
B: Moving a non-empty directory across a drive will throw an NIO.2 DirectoryNotEmptyException. --> Files.move(Paths.get("c:\\zoo"),Paths.get("c:\\zoo-new"));
-----------------------------------------------------------------------------------------------------------------------------------
F: How works delete() and deleteIfExists() for symbol link?
B: If the target of the path is a symbol link, then the symbolic link will be deleted, not the target of the link.
-----------------------------------------------------------------------------------------------------------------------------------
F: What returns isReadable() and isExecutable() methods when the file not exist?.
B: Like the isDirectory(), isRegularFile(), and isSymbolicLink() methods do not throw exceptions if the file does not exist but instead return false.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is FileTime class?
B: is a simple container class that stores the date/time information about when a file was accessed, modified, or created. For convenience, it has a 
       toMillis() method that returns the epoch time.
-----------------------------------------------------------------------------------------------------------------------------------
F: What Files.getLastModifiedTime(Path) returns?
B: returns a FileTime object to accomplish this.
-----------------------------------------------------------------------------------------------------------------------------------
F: How convert from the epoch time to a FileTime object?
B: The FileTime class also has a static fromMillis() method this.
-----------------------------------------------------------------------------------------------------------------------------------
F: How we can use BasicFileAttributeView?
B: is used to modify a file’s set of date/time values.
-----------------------------------------------------------------------------------------------------------------------------------
F: Where is available the setTimes() method?
B: only on BasicFileAttributeView, not the read only BasicFileAttributes class.
-----------------------------------------------------------------------------------------------------------------------------------
F: What returns resolve() with an absolute path as a parameter?
B: returns the absolute path. resolve() method does not normalize any path symbols.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is the return of Files.lines() and Files.readAllLines()?
B: The first one returns a Stream<Path>. The second one, returns a List<String>
-----------------------------------------------------------------------------------------------------------------------------------
F: Which is the diference between Files.lines() and Files.readAllLines()?
B: Files.lines() reads the file in a lazy manner, while Files.readAllLines() reads the entire file into memory all at once; therefore Files.lines() 
       works better on large files with limited memory available
-----------------------------------------------------------------------------------------------------------------------------------
F: What it means NOFOLLOW_LINKS option?
B: that if the source is a symbolic link, the link itself and not the target will be copied at runtime.
-----------------------------------------------------------------------------------------------------------------------------------
F: What it means ATOMIC_MOVE option?
B: that any process monitoring the file system will not see an incomplete file during the move.
-----------------------------------------------------------------------------------------------------------------------------------
F: When isSameFile() returns true?
B: only if the files pointed to in the file system are the same, without regard to the file contents.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is the result of the java.io.File.listFiles() method?
B: retrieves the members of the current directory without traversing any subdirectories.
-----------------------------------------------------------------------------------------------------------------------------------
F: How Files.walk() and Files.find() work?
B: recursively traverse a directory tree rather than list the contents of the current directory.
-----------------------------------------------------------------------------------------------------------------------------------
F: What JDBC means?
B: Java Database Connectivity: Accesses data as rows and columns.
-----------------------------------------------------------------------------------------------------------------------------------
F: Which are de 4 most important interfaces in JDBC?
B: Driver,Connection,Statement,ResultSet.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is the use of Driver Interface?
B: Knows how to get a connection to the database
-----------------------------------------------------------------------------------------------------------------------------------
F: What is the use of Connection Interface?
B: Knows how to communicate with the database
-----------------------------------------------------------------------------------------------------------------------------------
F: What is the use of Statement Interface?
B: Knows how to run the SQL
-----------------------------------------------------------------------------------------------------------------------------------
F: What is the use of ResultSet Interface?
B: Knows what was returned by a SELECT query
-----------------------------------------------------------------------------------------------------------------------------------
*
F: How we can get a Connection?
B: There are two main ways to get a Connection: DriverManager or DataSource.
       It better use DataSource then DriverManager, but the last one is in the exam objectives.
-----------------------------------------------------------------------------------------------------------------------------------
F: Which is the defauld mode of ResultSet?
B: By default, a ResultSet is in TYPE_FORWARD_ONLY mode and is in CONCUR_READ_ONLY mode.
-----------------------------------------------------------------------------------------------------------------------------------
F: Which statement can be executed with executeUpdate() method?
B: DELETE, INSERT, or UPDATE.
-----------------------------------------------------------------------------------------------------------------------------------
F: What can run execute() method?
B: can run query or an update. It returns a boolean so that we know whether there is a ResultSet. true-> ran query. false-> ran update
-----------------------------------------------------------------------------------------------------------------------------------
F: Which method can we use for a SELECT (query)?
B: For a SELECT SQL statement, use executeQuery() or execute() . For other SQL statements, use executeUpdate() or execute().
-----------------------------------------------------------------------------------------------------------------------------------
F: How is the index in a ResultSet?
B: The rows in a ResultSet are numbered start-ing with 1.
-----------------------------------------------------------------------------------------------------------------------------------
F: What absolute(4) does? 
B: Calling absolute(4) moves the cursor to the fourth row. Calling absolute(0) moves the cursor to a location immediately 
       before the result. Calling absolute(-1) moves the cursor to the last row.
-----------------------------------------------------------------------------------------------------------------------------------
F: What happen if we close a Connection?
B: Closing a Connection also closes the Statement and ResultSet.
-----------------------------------------------------------------------------------------------------------------------------------
F: What happen if we close a Statement?
B: Closing a Statement also closes the ResultSet.
-----------------------------------------------------------------------------------------------------------------------------------
F: Which is the correct order for closing JDBC interface objects?
B: The ResultSet is closed first, followed by the Statement, and then the Connection.
-----------------------------------------------------------------------------------------------------------------------------------
F: In JDBC excptions, what returns getMessage() method?
B: The getMessage() method returns a human-readable message as to what went wrong.
-----------------------------------------------------------------------------------------------------------------------------------
F: In JDBC excptions, what returns getSQLState() method?
B: The getSQLState() method returns a code as to what went wrong. 
-----------------------------------------------------------------------------------------------------------------------------------
F: In JDBC excptions, what is getErrorCode() method?
B: The getErrorCode() is a database-specific code.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is CONCUR_READ_ONLY?
B: Is a mode for Resulset concurrency when creating a Statement. Means that you can read the ResultSet but not write to it. --> is the default.
-----------------------------------------------------------------------------------------------------------------------------------
F: What is  CONCUR_UPDATABLE?
B: Is a mode for Resulset concurrency when creating a Statement. Means that you can both read and write to it.

-----------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------
F:When use Comparable or Comparator?
B:Comparable in Java is used to sort the objects with natural ordering while Comparator is used to sort attributes of different objects.

F:What happen whit final field in serialization?
B:Whenever any final field is evaluated as a constant expression, it is serialized by the JVM ignoring the presence of transient keyword.

F:What Externalizable interface does?
B:Serves the purpose of custom Serialization, where we can decide what to store in stream.

F:Two keys of Externalizable interface.
B:-Externalizable interface contains two methods: void writeExternal(ObjectOutput out) and void readExternal(ObjectInput in).
  -Externalizable requires public no-arg constructor.
  
F:Where Path.relativize throws Exception?
B:When only one Path is absolute. Both must be absolute or both relative. If this path and the given path are equal then an empty path is returned.

F:In Path1.resolve(P2), what happens if P2 is absolute?
B:Returns Path1.

F:Which are the five reduction methods defined in the java.util.stream.Stream interface?
B:collect,count,max,min and reduce.

F:Where are defined the methods sum and average?
B:Are defined in interfaces IntStream, LongStream, DoubleStream.
